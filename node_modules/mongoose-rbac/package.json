{
  "name": "mongoose-rbac",
  "version": "0.1.0",
  "description": "Role-based access control for mongoose apps.",
  "main": "lib/index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bryandragon/mongoose-rbac.git"
  },
  "keywords": [
    "mongoose",
    "security",
    "authorization",
    "rbac",
    "role",
    "permission"
  ],
  "author": {
    "name": "Bryan Dragon",
    "email": "bryandragon@gmail.com",
    "url": "http://www.bryandragon.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "devDependencies": {
    "mocha": "~1.8.1",
    "chai": "~1.6.1"
  },
  "dependencies": {
    "mongoose": "~3.6.11",
    "async": "~0.2.6"
  },
  "readme": "# mongoose-rbac\n\nRole-based access control for mongoose apps.\n\n## Installation\n\n```\nnpm install mongoose-rbac --save\n```\n\n## Usage\n\nmongoose-rbac gives you the building blocks to lock down your app with role-based access control and gets out of your way.\n\nGenerally, you will want to do the following:\n\n1. Create a `Permission` for each action you desire to control. A `Permission` consists of a `subject` and an `action`.\n2. Create a `Role` for each role you wish to assign. A `Role` only requires a unique `name`.\n3. Assign the desired set of permissions to each role.\n4. Use the mongoose-rbac plugin in your user schema.\n\n### Example\n\nFollowing is a typical example. Let's imagine we are managing a blog with users, preferences, posts and comments. First, we will define our permissions and roles:\n\n```javascript\n// permissions.js\n\nvar rbac = require('mongoose-rbac')\n  , Permission = rbac.Permission\n  , Role = rbac.Role\n  , permissions;\n\npermissions = [\n    { subject: 'Post', action: 'create' }\n  , { subject: 'Post', action: 'read' }\n  , { subject: 'Post', action: 'update' }\n  , { subject: 'Post', action: 'delete' }\n  , { subject: 'Comment', action: 'create' }\n  , { subject: 'Comment', action: 'read' }\n  , { subject: 'Comment', action: 'update' }\n  , { subject: 'Comment', action: 'delete' }\n  , { subject: 'Preference', action: 'create' }\n  , { subject: 'Preference', action: 'read' }\n  , { subject: 'Preference', action: 'update' }\n  , { subject: 'Preference', action: 'delete' }\n];\n\nPermission.create(permissions, function (err) {\n  var perms, admin, developer, readonly;\n\n  perms = Array.prototype.slice.call(arguments, 1);\n\n  admin = new Role({ name: 'admin' });\n  admin.permissions = perms;\n  admin.save(function (err, admin) {\n    developer = new Role({ name: 'developer' });\n    developer.permissions = perms.slice(0, 7);\n    developer.save(function (err, developer) {\n      readonly = new Role({ name: 'readonly' });\n      readonly.permissions = [perms[1], perms[5], perms[9]];\n      readonly.save(function (err, readonly) {\n        // ...\n      });\n    });\n  });\n});\n```\n\nAlternatively we can use `init` to easily bootstrap roles and permissions:\n\n```javascript\n// permissions.js\n\nvar rbac = require('mongoose-rbac');\n\nrbac.init({\n  admin: [\n    ['create', 'Post'],\n    ['read', 'Post'],\n    ['update', 'Post'],\n    ['delete', 'Post']\n  ],\n  readonly: [\n    // we can also specify permissions as an object\n    { action: 'read', subject: 'Post' }\n  ]\n}, function (err, admin, readonly) {\n  console.log(admin);\n  /*\n    { __v: 1,\n      name: 'admin',\n      _id: 513c14dbc90000d10100004e,\n      permissions: [ 513c14dbc90000d101000044,\n        513c14dbc90000d101000045,\n        513c14dbc90000d101000046,\n        513c14dbc90000d101000047 ] }\n  */\n  console.log(readonly);\n  /*\n    { __v: 1,\n      name: 'readonly',\n      _id: 513c14dbc90000d10100004f,\n      permissions: [ 513c14dbc90000d101000045 ] }\n  */\n});\n```\n\nNext, we will enhance our user model with the mongoose-rbac plugin:\n\n```javascript\n// user.js\n\nvar mongoose = require('mongoose')\n  , rbac = require('mongoose-rbac')\n  , UserSchema\n  , User;\n\nUserSchema = mongoose.Schema({\n  username: String,\n  passwordHash: String\n});\n\nUserSchema.plugin(rbac.plugin);\n\nmodule.exports = mongoose.model('User', UserSchema);\n```\n\nFinally, we can assign roles to our users and control their access to system resources:\n\n```javascript\nvar User = require('user')\n  , user;\n\nuser = new User({ username: 'hercules' });\nuser.save();\n\nuser.addRole('admin', function (err) {});\n\nuser.hasRole('admin', function (err, isAdmin) {\n  console.log(isAdmin); // true\n});\n\nuser.can('create', 'Post', function (err, can) {\n  if (can) {\n    // ok\n  }\n  else {\n    // insufficient privileges\n  }\n});\n\nuser.canAny([['read', 'Post'], ['create', 'Post']], function (err, canReadOrCreate) {\n  if (canReadOrCreate) {\n    // ok\n  }\n  else {\n    // insufficient privileges\n  }\n});\n\nuser.removeRole('admin', function (err) {});\n```\n\n## Model Plugin API\n\n### `hasRole(role, callback)`\n\nCheck if the model has the given role.\n\n* `role` String or Role\n* `callback(err, bool)` Function\n\n### `addRole(role, callback)`\n\nAdd the given role to the model.\n\n* `role` String or Role\n* `callback(err)` Function\n\n### `removeRole(role, callback)`\n\nRemove the given role from the model.\n\n* `role` String or Role\n* `callback(err)` Function\n\n### `can(action, subject, callback)`\n\nCheck if the model has the given permisison.\n\n* `action` String\n* `subject` String\n* `callback(err, bool)` Function\n\n### `canAny(actionsAndSubjects, callback)`\n\nCheck if the model has _any_ of the given permissions.\n\n* `actionsAndSubjects` Array (of `[String, String]`)\n* `callback(err, bool)` Function\n\n### `canAll(actionsAndSubjects, callback)`\n\nCheck if the model has _all_ of the given permissions.\n\n* `actionsAndSubjects` Array (of [String, String])\n* `callback(err, bool)` Function\n\n## Running Tests\n\nTo run the tests, clone the repository and install the dev dependencies:\n\n```bash\ngit clone git://github.com/bryandragon/mongoose-rbac.git\ncd mongoose-rbac && npm install\nmake test\n```\n\n## License\n\nCopyright (c) 2013 Bryan Dragon\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "bugs": {
    "url": "https://github.com/bryandragon/mongoose-rbac/issues"
  },
  "_id": "mongoose-rbac@0.1.0",
  "dist": {
    "shasum": "f42f9454e5873843363390ad2ddafdc7e79f3839"
  },
  "_from": "mongoose-rbac@",
  "_resolved": "https://registry.npmjs.org/mongoose-rbac/-/mongoose-rbac-0.1.0.tgz"
}
